WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:01.600
大家好 欢迎回来

00:00:01.600 --> 00:00:06.589
这是我的子采样解决方案

00:00:06.589 --> 00:00:09.039
我就是

00:00:09.038 --> 00:00:12.959
计算了这个概率 然后遍历整个

00:00:12.960 --> 00:00:17.370
int_words 数据集 把一些高频词舍弃掉

00:00:17.370 --> 00:00:19.824
所以我做的第一件事是

00:00:19.824 --> 00:00:23.160
计算数据集所有单词的频率

00:00:23.160 --> 00:00:26.359
因此我使用了计数器函数 counter 把数据集 int_words 传递给函数

00:00:26.359 --> 00:00:30.164
计数器会对数据集的各个单词进行统计

00:00:30.164 --> 00:00:33.789
借助这个统计结果 我们就可以得出频率

00:00:33.789 --> 00:00:35.306
你也知道 频率

00:00:35.305 --> 00:00:39.899
就是这些单词在整个数据集里出现的频繁程度

00:00:39.899 --> 00:00:43.408
所以我们可以用 word_counts

00:00:43.408 --> 00:00:47.884
除以 total_count 后者是数据集的总单词数

00:00:47.884 --> 00:00:52.829
不是各单词出现的次数

00:00:52.829 --> 00:00:58.219
不是不同的单词出现的次数 而是数据集的总单词数

00:00:58.219 --> 00:01:01.590
这里我用字典推导式创建了个字典

00:01:01.590 --> 00:01:05.640
我们可以把单词传递给该字典 从而求得频率

00:01:05.640 --> 00:01:10.400
所以取各单词的统计结果 将其除以总词数

00:01:10.400 --> 00:01:15.045
借助计数器 word_counts 来得到单词及其统计数据

00:01:15.045 --> 00:01:21.394
这里 .items 指的是函数会遍历 word_counts 里的所有键和值

00:01:21.394 --> 00:01:23.579
键指的就是单词 而值就是单词的统计结果

00:01:23.578 --> 00:01:25.949
所以

00:01:25.950 --> 00:01:31.075
让统计结果除以总词数 求得数据集单词的频率

00:01:31.075 --> 00:01:34.930
接下来要求舍弃概率

00:01:34.930 --> 00:01:41.025
所以我们要遍历频率集 freqs 的所有单词 然后代入这条公式

00:01:41.025 --> 00:01:42.659
t 是我们定义的阀值

00:01:42.659 --> 00:01:44.730
整个公式就是 1 减阀值除以单词频率的平方根

00:01:44.730 --> 00:01:46.230
所以我用另一个字典推导式

00:01:46.230 --> 00:01:48.885
再创建一个字典

00:01:48.885 --> 00:01:53.400
在这个字典里 键也是单词 值则是概率

00:01:53.400 --> 00:01:57.344
也即 1 减阀值除以单词频率的平方根

00:01:57.343 --> 00:01:58.798
好了 现在我们有了

00:01:58.799 --> 00:02:01.784
频率和舍弃概率

00:02:01.784 --> 00:02:05.579
我们可以遍历 int_words 数据里的所有单词

00:02:05.578 --> 00:02:09.394
并舍弃高频单词了

00:02:09.395 --> 00:02:13.020
接着 我要遍历

00:02:13.020 --> 00:02:17.384
int_ words 里的每个单词 找出相应的舍弃概率

00:02:17.383 --> 00:02:21.038
将该概率与某个随机生成的数字进行比较

00:02:21.038 --> 00:02:28.818
所以 random.random 会从一个在 0 和 1 之间的均匀分布中采样

00:02:28.818 --> 00:02:32.579
你可以这么想 假设单词舍弃概率是 70%

00:02:32.580 --> 00:02:38.780
也就是 0.7

00:02:38.780 --> 00:02:44.930
而 random.random 生成的随机数

00:02:44.930 --> 00:02:52.520
有 70% 的概率小于 0.7 还有 30% 的概率大于 0.7

00:02:52.520 --> 00:02:57.590
如果舍弃概率小于这个随机生成的数字

00:02:57.590 --> 00:03:03.620
假设概率是 0.7 小于 random.random 生成的随机数

00:03:03.620 --> 00:03:08.009
比如说这里随机生成了 0.8

00:03:08.008 --> 00:03:10.298
0.8 大于 0.7

00:03:10.299 --> 00:03:12.425
我们就会保留那个单词

00:03:12.425 --> 00:03:17.000
但保留的概率只有 30% 因为这是 0.7

00:03:17.000 --> 00:03:22.063
而我们能大于舍弃概率的概率就是 30%

00:03:22.063 --> 00:03:25.848
所以我们会保留 30% 的单词

00:03:25.848 --> 00:03:29.438
如果我这么写 或许能更清楚些

00:03:29.438 --> 00:03:32.348
这是单词的舍弃概率

00:03:32.348 --> 00:03:35.769
1 减去这个概率就是单词的保留概率

00:03:35.770 --> 00:03:39.580
一样的道理 如果我们生成了随机数

00:03:39.580 --> 00:03:44.650
而这是单词保留概率 比如单词的保留概率是 60%

00:03:44.650 --> 00:03:46.658
那么有 60% 的可能我们会

00:03:46.658 --> 00:03:49.299
生成一个小于这个概率的随机数

00:03:49.300 --> 00:03:52.030
所以

00:03:52.030 --> 00:03:58.663
这其实就是概率学 我们只是用概率来决定要舍弃还是保留一个单词

00:03:58.663 --> 00:04:04.030
我们想以概率学的方式来舍弃单词 这样才能对不同的单词一视同仁

00:04:04.030 --> 00:04:08.378
我们希望整个数据集的采样过程没有特例

00:04:08.378 --> 00:04:11.054
也就是无论输入哪一批

00:04:11.055 --> 00:04:13.135
都能以一定的概率舍弃单词

00:04:13.134 --> 00:04:15.188
比如让单词 the 在第一批被舍弃的概率

00:04:15.188 --> 00:04:18.514
和在中间以及最后一批被舍弃的概率一样

00:04:18.514 --> 00:04:20.189
好了 下个视频见

