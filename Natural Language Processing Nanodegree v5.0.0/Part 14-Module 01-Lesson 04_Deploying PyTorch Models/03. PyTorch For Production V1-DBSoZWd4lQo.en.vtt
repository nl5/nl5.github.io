WEBVTT
Kind: captions
Language: en

00:00:00.000 --> 00:00:02.715
Hi there. So, I'm going to be walking you through

00:00:02.715 --> 00:00:06.795
this tutorial for some new features in PyTorch 1.0.

00:00:06.795 --> 00:00:10.470
PyTorch 1.0 has been specifically built for making

00:00:10.470 --> 00:00:14.250
this transition between developing your model in Python,

00:00:14.250 --> 00:00:20.280
and then converting it into a module that you can load into a C++ environment.

00:00:20.280 --> 00:00:21.915
The reason I want to do this is because

00:00:21.915 --> 00:00:26.895
many production environments are actually written in C++.

00:00:26.895 --> 00:00:30.195
So, if you want to take your model,

00:00:30.195 --> 00:00:34.160
you've trained, and you've spent all this time developing and training,

00:00:34.160 --> 00:00:36.620
and you actually want to use it in production for

00:00:36.620 --> 00:00:39.620
making an app on your phone, or a web app,

00:00:39.620 --> 00:00:44.270
or embedding on a self-driving car,

00:00:44.270 --> 00:00:46.910
then you actually need to convert

00:00:46.910 --> 00:00:52.420
your PyTorch model from Python into something that can be used in C++.

00:00:52.420 --> 00:00:54.390
So, with PyTorch 1.0,

00:00:54.390 --> 00:00:59.120
the team has added a couple of great features for converting

00:00:59.120 --> 00:01:05.510
your model into a serialized format that you can load into a C++ program.

00:01:05.510 --> 00:01:11.795
So, there are the two ways in general of converting your PyTorch model into a C++ script.

00:01:11.795 --> 00:01:16.675
The first way of converting a PyTorch model is known as tracing.

00:01:16.675 --> 00:01:20.420
The idea behind this is that you can actually map out

00:01:20.420 --> 00:01:24.620
the structure of your model by passing an example tensor through it.

00:01:24.620 --> 00:01:28.505
So, you're basically doing a forward pass through your model,

00:01:28.505 --> 00:01:30.290
and then behind the scene,

00:01:30.290 --> 00:01:35.500
PyTorch is keeping track of all the operations that are being performed on your inputs.

00:01:35.500 --> 00:01:39.170
In this way, it can actually build out a static graph that can then

00:01:39.170 --> 00:01:43.175
be exported and loaded into C++.

00:01:43.175 --> 00:01:47.120
So, to do this, we use a new module in PyTorch called JIT.

00:01:47.120 --> 00:01:50.610
So, JIT stands for Just-In-Time compiler.

00:01:50.610 --> 00:01:52.120
So, the way this works,

00:01:52.120 --> 00:01:54.080
is that first you create your model.

00:01:54.080 --> 00:01:59.495
So, in this case, we're just using a resnet18 model that we get from torch vision.

00:01:59.495 --> 00:02:02.950
Really, this could be any model that you've defined and you've trained.

00:02:02.950 --> 00:02:06.110
Then, we need an example of an input.

00:02:06.110 --> 00:02:09.380
So, this can be just random values,

00:02:09.380 --> 00:02:11.720
a random tensor, but it should have

00:02:11.720 --> 00:02:14.810
the same shape of what you would normally provide to your model.

00:02:14.810 --> 00:02:16.035
So, in this case,

00:02:16.035 --> 00:02:19.790
resnet18 is an image classifier convolutional network.

00:02:19.790 --> 00:02:26.390
So, we would typically pass in images with some batch size and three color channels.

00:02:26.390 --> 00:02:29.875
These images are typically 224 by 224.

00:02:29.875 --> 00:02:33.800
So, this case, we're just passing in a single fake image.

00:02:33.800 --> 00:02:36.020
Notice that it is just a random tensor.

00:02:36.020 --> 00:02:37.480
So, this is not an actual image,

00:02:37.480 --> 00:02:40.430
it just needs to be an example input that is

00:02:40.430 --> 00:02:44.150
the same shape and size as your normal inputs.

00:02:44.150 --> 00:02:47.525
Then what we can do is pass in our model,

00:02:47.525 --> 00:02:50.465
and the example to torch.jit.trace,

00:02:50.465 --> 00:02:53.725
and this will give us back a trace to Script module.

00:02:53.725 --> 00:02:58.770
At this point, you can use your trace Script module just like a normal module.

00:02:58.770 --> 00:03:01.790
So, you can pass in data and then it'll just do

00:03:01.790 --> 00:03:05.135
a forward pass through it and it'll return the output,

00:03:05.135 --> 00:03:07.870
and you can look at that and use it like normal.

