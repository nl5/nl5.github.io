WEBVTT
Kind: captions
Language: pt-BR

00:00:00.000 --> 00:00:03.367
No projeto 3
vamos criar a rede neural

00:00:03.400 --> 00:00:07.033
que prevê se uma resenha de filme
é positiva ou negativa

00:00:07.067 --> 00:00:11.000
usando as contagens de palavras
que estão na resenha.

00:00:11.033 --> 00:00:15.200
As mudanças que eu fiz foram
uma função de pré-processar os dados,

00:00:15.234 --> 00:00:18.667
que tem todas as coisas
que testamos acima,

00:00:18.701 --> 00:00:23.501
o índice de palavras,
os vocabulários, os tamanhos,

00:00:23.534 --> 00:00:27.000
todas as variáveis que usamos
nos dados de treinamento.

00:00:27.033 --> 00:00:29.801
Coloquei em uma função
de pré-processamento.

00:00:29.834 --> 00:00:32.901
Está tudo junto,
com as variáveis, nesta classe.

00:00:32.934 --> 00:00:36.801
Outra coisa foi separar isso
em uma função que inicia a rede,

00:00:36.834 --> 00:00:38.067
só para limpar,

00:00:38.100 --> 00:00:41.734
e ela precisa saber quantos nós
de entrada e de saída,

00:00:41.767 --> 00:00:47.234
com base no número de resenhas
e palavras diferentes,

00:00:47.267 --> 00:00:49.367
e o número de rótulos.

00:00:49.400 --> 00:00:53.367
É bom ter essas coisas
em funções separadas,

00:00:53.400 --> 00:00:55.701
para poder ver
o progresso aqui,

00:00:55.734 --> 00:00:57.467
gostei de como ficou limpo.

00:00:57.501 --> 00:01:01.167
Também tem funções para
atualizar a camada de entrada,

00:01:01.200 --> 00:01:04.167
colocar o objetivo do rótulo,
como vimos antes,

00:01:04.200 --> 00:01:08.067
e movi para dentro da classe,
para ficar tudo junto.

00:01:08.100 --> 00:01:11.300
A classe fica portável
para usar em outro lugar.

00:01:11.334 --> 00:01:14.868
Agora o método de treinamento.
Onde as coisas acontecem.

00:01:14.901 --> 00:01:18.501
Primeiro eu conferi
se o número de resenhas

00:01:18.534 --> 00:01:20.667
é o mesmo que o número
de rótulos,

00:01:20.701 --> 00:01:25.200
para caso alguém passe
algo desalinhado, quero avisar

00:01:25.234 --> 00:01:28.767
que o comportamento da rede
pode ficar estranho.

00:01:28.801 --> 00:01:31.834
A próxima coisa
é inicializar uma variável

00:01:31.868 --> 00:01:34.801
para contar previsões
certas e erradas.

00:01:34.834 --> 00:01:37.100
É uma boa métrica
para acompanhar,

00:01:37.133 --> 00:01:39.701
para entender
como a rede está se saindo,

00:01:39.734 --> 00:01:41.167
durante o treinamento.

00:01:41.200 --> 00:01:43.834
Está melhorando?
Não está melhorando nada?

00:01:43.868 --> 00:01:45.100
Está piorando?

00:01:45.133 --> 00:01:48.901
Essas são as coisas básicas
para entender como está indo

00:01:48.934 --> 00:01:51.033
e poder ajustar.

00:01:51.067 --> 00:01:53.701
Agora selecionamos
uma resenha e um rótulo

00:01:53.734 --> 00:01:56.534
das resenhas de treinamento,
atualizamos a camada de entrada,

00:01:56.567 --> 00:02:00.367
assim como antes, propagamos
da camada zero para a 1,

00:02:00.400 --> 00:02:03.033
da camada de entrada
para a camada oculta,

00:02:03.067 --> 00:02:04.467
mas neste caso,

00:02:04.501 --> 00:02:09.767
precisamos ajustar
e gerar os dados antes,

00:02:09.801 --> 00:02:10.968
antes de propagar.

00:02:11.000 --> 00:02:12.567
Geramos a camada oculta,

00:02:12.601 --> 00:02:15.367
assim como antes,
mas sem a não linearidade,

00:02:15.400 --> 00:02:17.367
e a última
com não linearidade.

00:02:17.400 --> 00:02:19.667
É o passo de
propagação progressiva.

00:02:19.701 --> 00:02:22.467
Na retropropagação,
a primeira coisa é saber

00:02:22.501 --> 00:02:24.501
se estamos perto,
ou se erramos,

00:02:24.534 --> 00:02:29.000
aqui colocamos a função que criamos,
a previsão menos a função,

00:02:29.033 --> 00:02:31.734
e como temos não linearidade
nesta camada,

00:02:31.767 --> 00:02:35.200
a não linearidade da camada,
o delta da camada 2,

00:02:35.234 --> 00:02:37.801
tem que ser multiplicado
por esta função,

00:02:37.834 --> 00:02:41.667
que é o sigmoide vezes
1 menos o sigmoide,

00:02:41.701 --> 00:02:43.968
e continuamos
a retropropagar assim.

00:02:44.000 --> 00:02:45.567
Veja que pulamos aqui,

00:02:45.601 --> 00:02:48.234
porque a camada 1 não tem
não linearidade,

00:02:48.267 --> 00:02:51.501
não fazemos este passo
de multiplicação como antes.

00:02:51.534 --> 00:02:53.067
É uma camada linear.

00:02:53.100 --> 00:02:54.667
Não precisamos ajustar

00:02:54.701 --> 00:02:57.734
com a inclinação
da não linearidade.

00:02:57.767 --> 00:03:00.534
Tendo os deltas
das camadas 1 e 2,

00:03:00.567 --> 00:03:02.300
podemos atualizar os pesos,

00:03:02.334 --> 00:03:05.501
o que fazemos aqui,
como na outra rede neural,

00:03:05.534 --> 00:03:09.567
e acrescentamos uma lógica
para registrar o progresso,

00:03:09.601 --> 00:03:12.968
e ver a velocidade
com que estamos treinando,

00:03:13.000 --> 00:03:15.334
e quantas previsões
ficaram corretas.

00:03:15.367 --> 00:03:17.901
Como vamos decidir
se algo está correto?

00:03:17.934 --> 00:03:21.701
Procuro pelo valor absoluto
da nossa previsão.

00:03:21.734 --> 00:03:24.400
O valor real do erro.

00:03:24.434 --> 00:03:28.434
Aqui calculamos a diferença entre
o que a previsão deveria ser,

00:03:28.467 --> 00:03:29.667
e o que é.

00:03:29.701 --> 00:03:33.868
Se previr exatamente 0,5,
é totalmente ambíguo,

00:03:33.901 --> 00:03:36.734
exatamente no meio
entre positivo e negativo,

00:03:36.767 --> 00:03:38.334
não escolheu nenhum.

00:03:38.367 --> 00:03:42.434
Mas se for mais perto
da previsão certa,

00:03:42.467 --> 00:03:46.767
essa medida de erro
será menos do que 0,5.

00:03:46.801 --> 00:03:52.601
É por isso que posso ver
quantas estão certas

00:03:52.634 --> 00:03:54.234
e não só a perda.

00:03:54.267 --> 00:03:59.033
Posso contar e registrar
à medida que avançamos.

00:03:59.067 --> 00:04:02.467
Outra coisa que quero fazer
é testar.

00:04:02.501 --> 00:04:07.334
É só pegar a lógica progressiva
e a de avaliação

00:04:07.367 --> 00:04:09.067
e colocar em uma função,

00:04:09.100 --> 00:04:13.934
e colocar outra para rodar,
onde colocamos uma resenha,

00:04:13.968 --> 00:04:16.367
ela converte o texto
para uma entrada,

00:04:16.400 --> 00:04:18.734
propaga, e dá um rótulo.

00:04:18.767 --> 00:04:20.834
Podemos testar
com todos os dados

00:04:20.868 --> 00:04:24.367
ou colocar só exemplos
e ver como ficam.

00:04:24.400 --> 00:04:27.367
Agora que temos isto,

00:04:27.400 --> 00:04:30.567
vamos primeiro validar...

00:04:30.601 --> 00:04:33.367
Primeiro vamos criar uma.

00:04:33.400 --> 00:04:37.534
Aqui estou selecionando
as primeiras 24 mil resenhas

00:04:37.567 --> 00:04:41.434
para treinar.
Vou dizer que as últimas...

00:04:41.467 --> 00:04:46.467
As últimas mil resenhas
serão para testes.

00:04:46.501 --> 00:04:48.367
Vou continuar a fazer isso.

00:04:48.400 --> 00:04:50.734
Você poderia
separar de outra forma.

00:04:50.767 --> 00:04:53.801
Tem mais 25 mil no IMDB
que poderia usar.

00:04:53.834 --> 00:04:58.567
Mas só pra facilitar,
vamos fazer assim.

00:04:58.601 --> 00:05:00.300
Vou inicializar assim.

00:05:00.334 --> 00:05:04.601
A taxa de aprendizagem padrão
está aqui.

00:05:04.634 --> 00:05:07.234
Vou colocar aqui
para podermos ver.

00:05:07.267 --> 00:05:10.434
Eu também quero testar,
antes de começar.

00:05:10.467 --> 00:05:13.100
Os pesos são inicializados
aleatoriamente,

00:05:13.133 --> 00:05:16.734
então não deveria
fazer boas previsões.

00:05:16.767 --> 00:05:20.634
Neste caso,
está exatamente 50% certo.

00:05:20.667 --> 00:05:25.033
É como chutar aleatoriamente
entre positivo e negativo.

00:05:25.067 --> 00:05:28.534
Você acertaria 50%.
É o que estamos vendo.

00:05:28.567 --> 00:05:30.567
É um bom começo.

00:05:30.601 --> 00:05:33.701
Principalmente em uma rede
com só duas previsões.

00:05:33.734 --> 00:05:37.567
Quero que ela comece
sem uma tendência.

00:05:37.601 --> 00:05:39.300
Se eu inicializar pesos

00:05:39.334 --> 00:05:43.100
que sempre preveem
de um jeito ou do outro,

00:05:44.100 --> 00:05:47.467
ou que não acertam nada,
eu começo a achar estranho.

00:05:47.501 --> 00:05:49.300
Deve ter algo quebrado.

00:05:49.334 --> 00:05:51.467
Então primeiro
investigo isso.

00:05:51.501 --> 00:05:55.167
Como podemos ver,
está aleatório,

00:05:55.200 --> 00:05:59.601
não parece ter
nenhum poder de previsão.

00:05:59.634 --> 00:06:03.400
Agora vamos tentar
treinar nossa rede.

00:06:03.434 --> 00:06:07.501
Algo que eu vou colocar
um pouco mais tarde é que,

00:06:07.534 --> 00:06:12.000
a cada 2500 previsões,
ele imprime outra linha.

00:06:12.033 --> 00:06:14.601
Não vemos só
onde o progresso está agora,

00:06:14.634 --> 00:06:16.200
mas vemos
mudar com o tempo.

00:06:16.234 --> 00:06:19.267
Enquanto ela treina,
presto atenção em certas coisas.

00:06:19.300 --> 00:06:20.467
Primeiro a velocidade.

00:06:20.501 --> 00:06:23.300
Tento imaginar
quanto tempo vai levar.

00:06:24.133 --> 00:06:26.267
Também olho para
a taxa de acerto.

00:06:26.300 --> 00:06:31.234
Por enquanto,
não está prevendo muito bem.

00:06:31.267 --> 00:06:34.234
Um pouquinho pior
do que o aleatório.

00:06:34.267 --> 00:06:36.667
Pior do que estava antes.

00:06:36.701 --> 00:06:40.767
Neste ponto,
com 14% dos dados treinados,

00:06:40.801 --> 00:06:42.801
e ainda não aprendeu nada,

00:06:42.834 --> 00:06:44.901
está ainda pior,

00:06:44.934 --> 00:06:47.734
eu começo a achar
que tem algo errado.

00:06:47.767 --> 00:06:53.234
Alguns tipos de redes neurais
neste momento continuam aleatórias,

00:06:53.267 --> 00:06:55.767
principalmente aprendizagem
por reforço,

00:06:55.801 --> 00:06:58.968
mas com estes dados,
procuramos correlação direta,

00:06:59.000 --> 00:07:01.901
e eu deveria estar vendo
alguma mudança aqui.

00:07:01.934 --> 00:07:03.434
Vou parar.

00:07:03.467 --> 00:07:05.734
Poderíamos esperar mais,

00:07:06.801 --> 00:07:12.400
mas acho que não vai ser
uma boa ideia, então parei.

00:07:13.300 --> 00:07:17.567
A primeira coisa que eu penso é
que a velocidade está muito alta.

00:07:18.868 --> 00:07:21.767
Quando acontece isso,
pode estar divergindo,

00:07:21.801 --> 00:07:25.767
então vamos diminuir
a taxa de aprendizagem.

00:07:25.801 --> 00:07:30.434
Uma boa maneira de experimentar
é começar com ordens de grandeza,

00:07:30.467 --> 00:07:32.267
então vou dividir por 10.

00:07:32.300 --> 00:07:34.033
Reiniciar a rede...

00:07:34.067 --> 00:07:37.167
Começar a rodar de novo
para comparar.

00:07:37.200 --> 00:07:39.567
Está variando um pouco...

00:07:41.968 --> 00:07:44.167
Estou vendo
o mesmo comportamento.

00:07:44.200 --> 00:07:45.868
Não está melhorando.

00:07:45.901 --> 00:07:48.367
Vou deixar isso treinando
e falar sobre

00:07:48.400 --> 00:07:49.934
por que diminuí a taxa.

00:07:49.968 --> 00:07:51.834
A taxa de aprendizagem,
como você sabe,

00:07:51.868 --> 00:07:53.300
é o tamanho do passo,

00:07:53.334 --> 00:07:56.501
o tamanho do pulo
que a rede tenta dar

00:07:56.534 --> 00:07:58.367
para reduzir o erro.

00:07:58.400 --> 00:08:02.033
O motivo padrão para acontecer
esse tipo de coisa

00:08:02.067 --> 00:08:04.000
é que ele está
ultrapassando.

00:08:04.033 --> 00:08:09.167
Acaba não chegando mais perto
de resolver o problema

00:08:09.200 --> 00:08:12.167
do que quando começou,
porque vai longe demais.

00:08:12.200 --> 00:08:15.667
Dar passos menores significa
que a rede treina devagar,

00:08:15.701 --> 00:08:18.300
mas tende a fazer progresso.

00:08:18.334 --> 00:08:21.033
Isto, para mim,
poderia ser muito lento,

00:08:21.067 --> 00:08:24.000
mas não parece
estar treinando nada.

00:08:24.033 --> 00:08:28.334
Está acampada, perto do 50%,
e isso é mais preocupante.

00:08:28.367 --> 00:08:31.267
Com 20%, já deveria
ter feito alguma coisa.

00:08:31.300 --> 00:08:34.467
Vou cancelar
e reduzir de novo.

00:08:34.501 --> 00:08:36.601
Veja isso.

00:08:36.634 --> 00:08:39.067
Mais uma vez...

00:08:40.367 --> 00:08:42.968
Acampada em 40%...

00:08:43.934 --> 00:08:45.567
48%...

00:08:46.601 --> 00:08:48.067
Vamos, amigo.

00:08:48.100 --> 00:08:52.267
Essas métricas acabam ficando
divertidas de assistir.

00:08:54.000 --> 00:08:58.701
Estou surpreso, ainda
não está acontecendo nada.

00:08:59.534 --> 00:09:00.601
Lá vamos nós!

00:09:00.634 --> 00:09:02.834
Está começando
a aprender um pouco.

00:09:02.868 --> 00:09:05.968
Bom sinal. Está começando
a encontrar correlação.

00:09:06.000 --> 00:09:08.133
Mas ainda está indo
muito devagar.

00:09:08.167 --> 00:09:10.701
São poucas resenhas
por segundo,

00:09:10.734 --> 00:09:13.033
na verdade são
umas 100 por segundo,

00:09:13.067 --> 00:09:17.133
mas também não está
convergindo muito rápido.

00:09:17.167 --> 00:09:19.767
Eu poderia diminuir
ainda mais a taxa,

00:09:19.801 --> 00:09:23.367
mas quanto mais se diminui,
mais lento ela aprende.

00:09:23.400 --> 00:09:25.534
Antes estávamos indo
longe demais,

00:09:25.567 --> 00:09:27.200
e eu diminuí mais a taxa.

00:09:27.234 --> 00:09:29.834
Eu poderia continuar
ajustando a taxa,

00:09:29.868 --> 00:09:32.200
posso passar o dia todo
fazendo isso,

00:09:32.234 --> 00:09:34.200
e ter ganhos incrementais.

00:09:34.234 --> 00:09:37.367
Mas está tão cedo,
não refinamos nada,

00:09:37.400 --> 00:09:42.467
tem perguntas de enquadramento
que precisamos reavaliar.

00:09:42.501 --> 00:09:47.667
Podemos enquadrar o problema para
a correlação ficar mais clara?

00:09:47.701 --> 00:09:50.133
Agora estou pensando...

00:09:50.167 --> 00:09:51.167
Aqui em cima.

00:09:51.200 --> 00:09:52.501
Esta é a estrutura.

00:09:52.534 --> 00:09:55.300
Contamos as palavras,
colocamos aqui,

00:09:55.334 --> 00:09:57.200
e faz uma previsão.

00:09:57.234 --> 00:09:59.968
O que faz isso ser
tão difícil para ela

00:10:00.000 --> 00:10:02.567
que leva esse tempo todo?

00:10:02.601 --> 00:10:03.834
Está convergindo,

00:10:03.868 --> 00:10:05.968
mas não muito rápido.

00:10:06.000 --> 00:10:10.300
Podemos fazer alguma coisa
para que fique mais óbvio?

00:10:10.334 --> 00:10:16.000
Identificamos as palavras
que foram validadas...

00:10:16.033 --> 00:10:18.801
Não são essas listas.
Isso são as contagens.

00:10:18.834 --> 00:10:22.601
Aqui. Para encontrar
essas palavras mais facilmente.

00:10:22.634 --> 00:10:24.968
Tem duas coisas
que eu costumo fazer.

00:10:25.000 --> 00:10:27.968
Uma é começar a mudar coisas
e ver se funciona.

00:10:28.000 --> 00:10:32.100
A outra é cavar mais fundo
exatamente no que acontece,

00:10:32.133 --> 00:10:34.667
olhar alguns
exemplos de treinamento,

00:10:34.701 --> 00:10:37.801
ver se o padrão que eu acho
que deveria estar lá

00:10:37.834 --> 00:10:38.868
de fato aparece.

00:10:38.901 --> 00:10:41.234
Talvez tenha um erro
na minha lógica.

00:10:41.267 --> 00:10:43.968
Geralmente, quando
não treina corretamente,

00:10:44.000 --> 00:10:46.701
é porque tem alguma coisa
bem simples aqui,

00:10:46.734 --> 00:10:49.501
mais do que uma mudança
grande e complicada.

00:10:49.534 --> 00:10:52.267
Mas às vezes precisa
ser algo complicado.

00:10:54.033 --> 00:10:55.834
Ainda está treinando rápido.

00:10:55.868 --> 00:10:57.634
Vamos extrapolar isso.

00:10:57.667 --> 00:11:01.868
O treinamento tende a ser rápido
no início e depois desacelerar.

00:11:01.901 --> 00:11:11.167
Acho que isso não vai passar
de 61% ou 62%. Algo assim.

00:11:11.200 --> 00:11:13.300
Ela continua treinando.

00:11:13.334 --> 00:11:16.634
Agora eu quero saber
como posso simplificar isso.

00:11:16.667 --> 00:11:19.133
Qual é o sinal
nos dados de treinamento

00:11:19.167 --> 00:11:22.334
e o que é o ruído neles.

00:11:22.367 --> 00:11:26.334
Isso vai ser o assunto
da próxima seção.

00:11:26.367 --> 00:11:27.834
Vamos analisar,

00:11:27.868 --> 00:11:30.434
e ver se conseguimos
treinar mais rápido.

00:11:30.467 --> 00:11:32.734
Vou deixar isso treinar
até o final.

00:11:32.767 --> 00:11:35.133
Acho que não vai
melhorar muito.

00:11:35.167 --> 00:11:38.701
Ainda vamos conseguir
um classificador melhor.

