WEBVTT
Kind: captions
Language: zh-CN

00:00:00.000 --> 00:00:03.690
我们继续学习概念意义上循环神经网络的示例

00:00:03.690 --> 00:00:06.870
假设我们想要构建一个序列检测器

00:00:06.870 --> 00:00:11.280
我们决定时序检测器可以追踪字母

00:00:11.279 --> 00:00:14.429
所以实际上我们构建了词语检测器

00:00:14.429 --> 00:00:20.202
具体来说 我们希望网络检测到词语 优达学城 (Udacity)

00:00:20.202 --> 00:00:22.769
只是这个词语

00:00:22.769 --> 00:00:24.064
在我们开始前

00:00:24.065 --> 00:00:26.798
我们需要做出几个决定

00:00:26.797 --> 00:00:30.914
通过使用 one-hot 向量编码定义输入

00:00:30.914 --> 00:00:33.570
包括 7 个二进制值

00:00:33.570 --> 00:00:39.134
这里我使用的字母按照升序方式 不过字母的顺序可以是任意的

00:00:39.134 --> 00:00:44.515
每个字母都用对应的指标 1 表示

00:00:44.515 --> 00:00:46.890
其他地方都是 0

00:00:46.890 --> 00:00:54.230
例如 字母 A 用 1 和六个 0 进行表示

00:00:54.229 --> 00:00:58.099
这是我们其余需要的字母

00:00:58.100 --> 00:01:02.350
没有出现在词语优达学城 (Udacity) 的字母

00:01:02.350 --> 00:01:05.769
通过一个全部包括 0 的简单向量表示

00:01:05.769 --> 00:01:08.185
例如这些字母

00:01:08.185 --> 00:01:11.409
我们希望检测的序列会是

00:01:11.409 --> 00:01:16.405
长度为 7 的输入 顺序如下 U

00:01:16.405 --> 00:01:21.909
D A C I

00:01:21.909 --> 00:01:26.209
T 和 Y

00:01:26.209 --> 00:01:32.644
我们在每个时间步长添加随机字母 训练系统

00:01:32.644 --> 00:01:37.619
这里展示了从左向右创建输入序列

00:01:37.620 --> 00:01:41.905
我们也会偶尔插入词语优达学城 (Udacity)

00:01:41.905 --> 00:01:43.515
我们设置目标值

00:01:43.515 --> 00:01:47.310
输出总为 0

00:01:47.310 --> 00:01:52.454
除非优达学城 (Udacity) 最后一个字母 Y 进入系统

00:01:52.454 --> 00:01:56.435
只有那时 目标值设为 1

00:01:56.435 --> 00:02:00.650
另外 系统会承认所有输入

00:02:00.650 --> 00:02:05.790
并且只有检测到满意序列时 才会返回目标输出 1

00:02:05.790 --> 00:02:10.265
我们以展开形式绘制网络的概略图

00:02:10.264 --> 00:02:13.154
我们得到一个包含 7 个值的输入向量

00:02:13.155 --> 00:02:16.669
一个输出和一个状态

00:02:16.669 --> 00:02:19.530
状态可以是包含任何数量的隐藏神经元

00:02:19.530 --> 00:02:24.495
在这个图解中 我们使用 n 更具有通用性

00:02:24.495 --> 00:02:28.009
第一个状态向量通常设为 0

00:02:28.009 --> 00:02:32.159
这样下一个状态可以成为接下来的输入

00:02:32.159 --> 00:02:33.902
训练这个网络时

00:02:33.902 --> 00:02:36.614
我们把目标值设为 0 或 1

00:02:36.615 --> 00:02:40.335
没有检测到优达学城 (Udacity) 这个词语时 目标为 0

00:02:40.335 --> 00:02:42.000
如果检测到 目标为 1

00:02:42.000 --> 00:02:46.050
如果按照目标为 0 或 1 训练系统

00:02:46.050 --> 00:02:51.165
我们希望输出也会在值 0 到 1 之间

00:02:51.164 --> 00:02:54.584
训练系统和最优化权重后

00:02:54.585 --> 00:02:57.900
我们希望出现序列 Udacity 时

00:02:57.900 --> 00:03:00.420
输出会通过呈现值接近 1

00:03:00.419 --> 00:03:03.659
提示检测到了序列

00:03:03.659 --> 00:03:06.564
例如这个例子中的 0.9

00:03:06.564 --> 00:03:12.300
实际上来说 我们可以设置阈值 如 0.9

00:03:12.300 --> 00:03:16.305
确定如果输出超过这个阈值

00:03:16.305 --> 00:03:20.550
可以检测到我们想要的序列

00:03:20.550 --> 00:03:23.314
顺便说一下 这个例子中

00:03:23.314 --> 00:03:27.003
值 0.9 是任意选择的

00:03:27.003 --> 00:03:32.924
在我们例子中 循环神经网络经过训练 识别包含 7 个输入的序列

00:03:32.925 --> 00:03:35.825
例如优达学城 (Udacity) 这个词语的字母

00:03:35.824 --> 00:03:37.864
不过我们可以训练循环神经网络

00:03:37.865 --> 00:03:40.950
识别其他长度的字母序列

00:03:40.949 --> 00:03:43.569
例如快乐 (happy) 词语中的 5 个字母

00:03:43.569 --> 00:03:48.084
一般来说 循环神经网络可以处理各种各样的序列长度

00:03:48.085 --> 00:03:50.129
那么我们如何训练这个网络呢？

00:03:50.129 --> 00:03:51.615
换句话说

00:03:51.615 --> 00:03:55.585
我们如何优化它的权重 来最小化输出误差呢？

00:03:55.585 --> 00:03:59.030
我们要利用通过时间的反向传播 实现这一点

00:03:59.030 --> 00:04:02.289
我们会在接下来的视频中学习所有这些内容

